version: "3.7"
services:
  postgrest:
    profiles:
      - production
      - dev
    image: postgrest/postgrest
    ports:
      - "3001:3000"
    environment:
      PGRST_DB_URI: ${PGRST_DB_URI}
      PGRST_DB_SCHEMA: macrostrat_api
      PGRST_DB_ANON_ROLE: ${PGUSER}
    depends_on:
      - db
  db:
    build: ./database
    profiles:
      - production
      - dev
    environment:
      - PGUSER
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - ${PG_PORT}:5432
    volumes:
      - db_cluster:/var/lib/postgresql/data
  dacite_prod:
    image: dacite:latest
    profiles:
      - production
    environment:
      - NEXT_PUBLIC_SERVER_URL=${NEXT_PUBLIC_SERVER_URL}
      - NEXT_PUBLIC_CLIENT_URL=${NEXT_PUBLIC_CLIENT_URL}
      - NEXT_PUBLIC_TOPOLOGY_URL=${NEXT_PUBLIC_TOPOLOGY_URL}
    ports:
      - 1234:1234
  birdseye:
    build: ./BirdsEye/frontend
    profiles:
      - production
    ports:
      - "1235:1235"
  geologic_map_server:
    build: ./BirdsEye/backend
    profiles:
      - production
      - dev
    environment:
      - GEOLOGIC_MAP_CONFIG=/app/docker-assets/docker-map-config.json
      - GEOLOGIC_MAP_DATABASE=${GEOLOGIC_MAP_DATABASE}
      - IMPORTER_API=${IMPORTER_API}
      - EXPORTER_API=${EXPORTER_API}
    entrypoint: "/python_app/docker-scripts/run"
    ports:
      - "40053:8000"
    depends_on:
      - db
  # db_backup:
  #   profiles:
  #     - production
  #   image: ghcr.io/uw-macrostrat/pg-backup-service:latest
  #   environment:
  #     - DB_NAME=column_data
  #     - DB_BACKUP_PREFIX=column_data
  #     - PGHOST=database
  #     - S3_ENDPOINT
  #     - SCHEDULE=@weekly
  #     - DB_BACKUP_MAX_N=5
  #     - S3_ACCESS_KEY
  #     - S3_SECRET_KEY
  #     - S3_BACKUP_BUCKET
volumes:
  db_cluster:
